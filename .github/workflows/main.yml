name: RDP

on:
  workflow_dispatch:

  jobs:
    secure-rdp:
      runs-on: windows-latest
      timeout-minutes: 3600

      steps:
       - name: Configure Core RDP Settings
         run:
           #Enable Remote Desktop and disable Network Level Authentication (if needed)
           Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'
                              -Name "fDenyTSConnections" -Value 0 -Force
           Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
                              -Name "UserAuthentication" -Value 0 -Force
           Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
                              -Name "SecurityLayer" -Value 0 -Force

           #Remove any existing rule with the same name to avoid duplication
           netsh advfirewall firewall delete rule name="RDP-Tailscale"

           #For testing, allow any incoming connection on port 3389
           netsh advfirewall firewall add rule name="RDP-Tailscale"
             dir=in action=allow protocol=TCP localport=3389

             # (Optional) Restart the Remote Desktop Service to ensure changes take effect
             Restart-Service -Name TermService -Force

          - name: Create RDP User with Secure Password
            run: |
              Add-Type -AssemblyName System.Security
              $charSet = @{
    Upper = [char[]](65..90)      # A-Z
    Lower = [char[]](97..122)     # a-z
    Number = [char[]](48..57)     # 0-9
    Special = ([char[]](58..64) + [char[]](91..96) + [char[]](123..126))  # Special characters
}

# Generate random password
$rawPassword = @()
$rawPassword += $charSet.Upper | Get-Random -Count 4
$rawPassword += $charSet.Lower | Get-Random -Count 4
$rawPassword += $charSet.Number | Get-Random -Count 4
$rawPassword += $charSet.Special | Get-Random -Count 4
$password = -join ($rawPassword | Sort-Object { Get-Random })

# Convert password to secure string
$securePass = ConvertTo-SecureString $password -AsPlainText -Force

# Create new local user and assign groups
New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
Add-LocalGroupMember -Group "Administrators" -Member "RDP"
Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

# Display username and password
echo "RDP_CREDS=User: RDP Password: $password" >> $env:GITHUB_ENV
if (-not (Get-LocalUser -Name "RDP")) {
    Write-Error "User creation failed"
    exit 1
}

- name: Install Tailscale
  run: |
    $url = "https://pkgs.tailscale.com/stable/tailscale-1.82.0-amd64.msi"
    $installerPath = "$env:TEMP\tailscale.msi"
    
    Invoke-WebRequest -Uri $url -OutFile $installerPath
    Start-Process msiexec.exe -ArgumentList "/i", "$installerPath", "/quiet", "/norestart" -Wait
    Remove-Item $installerPath -Force

- name: Establish Tailscale Connection and unique hostname
  run: |
    # Bring up Tailscale with the provided auth key and set the hostname
    & "$env:ProgramFiles\Tailscale\Tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=${{ github.actor }}-${{ github.run_id }}
    # Wait for Tailscale to assign an IP
$stsIP = $null
$retries = 0
while (-not $stsIP -and $retries -lt 10) {
    $stsIP = & "$env:ProgramFiles\Tailscale\Tailscale.exe" ip -4
    Start-Sleep -Seconds 5
    $retries++
}

if (-not $stsIP) {
    Write-Error "Tailscale IP not assigned. Exiting."
    exit 1
}
echo "TAILSCALE_IP=$stsIP" >> $env:GITHUB_ENV

- name: Verify RDP Accessibility
  run: |
    Write-Host "Tailscale IP: $env:TAILSCALE_IP"
    
    # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
    $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
    if (-not $testResult.TcpTestSucceeded) {
        Write-Error "RDP connection failed. Exiting."
        exit 1
    }
    Write-Host "RDP connection successful."
    - name: Maintain Connection
  run: |
    Write-Host "~ RDP ACCESS ~"
    Write-Host "Address: $env:TAILSCALE_IP"
    Write-Host "Username: RDP"
    Write-Host "Password: $(echo $env:RDP_CREDS)"
    Write-Host "====================="
    
    # Keep runner active indefinitely (or until manually cancelled)
    while ($true) {
        Start-Sleep -Seconds 3600
    }
